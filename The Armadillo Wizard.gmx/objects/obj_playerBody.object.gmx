<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

hit = 0;
grav = 0.4;
//Horizontal speed and verticle speed 
hsp = 0;
vsp = 0;
jumpSpeed = 7;

move = 0;
moveSpeed = 0;
sprintSpeed = 4;
walkSpeed = 2;

hsp_carry = 0;

nearWallX = false;
jumps = 0;
jumpsMax = 2;
grounded = false;
floatingAim = false;
wallSliding = false;
wsLeft = false;
wsRight = false;
damaged = false;
wallMomentum = 0;

fail = false;
fail2 = false;
win = 0;

whichHat = 0;

jetpack = false;
jetfuel = 50;
falling = false;

gettingAir = 0;

key_down = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Start
instance_create(1,1,obj_scoreControl);
instance_create(1,1,obj_playerStaff);
instance_create(1,1,obj_failMenu);
instance_create(1,1,obj_winMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fail2 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>damaged = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving Code

if(win != 0)
{ 
    image_speed = 0;
    exit;
}
// equals 0 or 1
if(!fail)
{
key_right = keyboard_check(ord("D")) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
// equals -1 or 0
key_left = -(keyboard_check(ord("A")) || (gamepad_axis_value(0,gp_axislh) &lt; 0));
key_jump = keyboard_check_pressed(ord("W")) || (gamepad_button_check_pressed(0,gp_face1));
key_jumpjet = keyboard_check(ord("W")) || (gamepad_button_check(0,gp_face1));
key_aimStaff = mouse_check_button(mb_right) || (gamepad_button_check(0,gp_shoulderrb));
key_run = keyboard_check(vk_lshift);
key_down = keyboard_check(ord("S")) || (gamepad_axis_value(0,gp_axislv) &gt; 0);
}
else
{
key_right = 0;
key_left = 0;
key_jump = 0;
key_jumpjet = 0;
key_aimStaff = 0;
key_run = 0;
key_down = 0;
}


if(damaged)
{
    if(!fail)
    {
        image_alpha = 0.5;
        if(hit == 0)
        hit = 1;
    }
}
else
{
    image_alpha = 1;
    hit = 0;
}

if(hit == 1)
{
    vsp = -4;
    hit = 2;
}
//react to inputs left or right
if(wallMomentum == 0)
{
    move = key_right + key_left;
}
//RUNNING OR WALKING!!!!!!!!!!!!!!!

if(grounded) 
{   
    if(key_run &amp;&amp; !fail)
    {
     moveSpeed = sprintSpeed;
    }
    else
    {
        moveSpeed = walkSpeed;
    }
}
//will take the -1 or 1 from keyboard checks and times it by 4 (movespeed)
if(!floatingAim &amp;&amp; wallMomentum == 0)
    hsp = move * moveSpeed;
    
//GRAVITY TAKES EFFECT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
if(vsp &lt; 8)
{
       vsp += grav;//if under 10 keep adding gravity speed

}


//JUMPING!!!!!!!!!!!!!!!!!!!!
if(grounded)
{
    falling = false;
    wallMomentum = 0;
    gettingAir = 0;
    wsLeft = false;
    wsRight = false;
    if(vsp &gt; 0)
        jumps = jumpsMax;
    if(jetpack == true &amp;&amp; jetfuel &lt; 50)
    jetfuel += 2;
}

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

//HORIZONTAL COLLISION MOVING PLATFORM!!!!!!!!!!!!!!!
if(place_meeting(x+hsp_final,y,obj_movingPlatformH) &amp;&amp; (!place_meeting(x+2,y,obj_platform)||!place_meeting(x-2,y,obj_platform)))
{
//sign returns 1 or -1 depending on whether hsp is posative or negative, so as long as it isn't one pixel away continue
    while(!place_meeting(x+sign(hsp_final),y,obj_movingPlatformH))
    {
    //move by 1 or -1
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
    if(grounded &amp;&amp; vsp == 0)
    nearWallX = true;
}
//HORIZONTAL COLLISION!!!!!!!!!!!!!!!
if(place_meeting(x+hsp_final,y,obj_wall))
{
//sign returns 1 or -1 depending on whether hsp is posative or negative, so as long as it isn't one pixel away continue
    while(!place_meeting(x+sign(hsp_final),y,obj_wall))
    {
    //move by 1 or -1
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
    nearWallX = true;
}
//HORIZONTAL COLLISION!!!!!!!!!!!!!!!
if(place_meeting(x+hsp_final,y,obj_platform) || place_meeting(x+hsp_final,y,obj_ice) || place_meeting(x+hsp_final,y,obj_bolder))
{
//sign returns 1 or -1 depending on whether hsp is posative or negative, so as long as it isn't one pixel away continue
    if(place_meeting(x+hsp_final,y,obj_platform))
    {
        while(!place_meeting(x+sign(hsp_final),y,obj_platform))
        {
    //move by 1 or -1
            x += sign(hsp_final);
        }
    }
    if(place_meeting(x+hsp_final,y,obj_ice))
    {
        while(!place_meeting(x+sign(hsp_final),y,obj_ice))
        {
    //move by 1 or -1
            x += sign(hsp_final);
        }
    }
    if(place_meeting(x+hsp_final,y,obj_bolder))
    {
        while(!place_meeting(x+sign(hsp_final),y,obj_bolder))
        {
    //move by 1 or -1
            x += sign(hsp_final);
        }
    }
    hsp_final = 0;
    hsp = 0;
    if(!place_meeting(x+hsp_final,y,obj_bolder))
    nearWallX = true;
}
else
nearWallX = false;

x += hsp_final;

//VERTICAL COLLISION MOVING PLATFORM!!!!!!!!!!!!!!!
if(place_meeting(x,y+vsp,obj_movingPlatformH) &amp;&amp; (!place_meeting(x+2,y,obj_platform)||!place_meeting(x-2,y,obj_platform)))
{
    while(!place_meeting(x,y+sign(vsp), obj_movingPlatformH))
    {
        y += sign(vsp);
    }
    
    vsp = 0;
}

//VERTICAL COLLISION!!!!!!!!!!!!!!!
if(place_meeting(x,y+vsp,obj_platform) || place_meeting(x,y+vsp,obj_ice)|| place_meeting(x,y+vsp,obj_bolder) || (place_meeting(x,y+vsp,obj_standCrab) &amp;&amp; vsp &gt; 0))
{
    if(place_meeting(x,y+vsp,obj_platform))
    {
        while(!place_meeting(x,y+sign(vsp), obj_platform))
        {
            y += sign(vsp);
        }
    }
    if(place_meeting(x,y+vsp,obj_ice))
    {
        while(!place_meeting(x,y+sign(vsp), obj_ice))
        {
            y += sign(vsp);
        }
    }
    if(place_meeting(x,y+vsp,obj_bolder))
    {
        while(!place_meeting(x,y+sign(vsp), obj_bolder))
        {
            y += sign(vsp);
        }
    }
    if(place_meeting(x,y+vsp,obj_standCrab) &amp;&amp; vsp &gt; 0)
    {
        while(!place_meeting(x,y+sign(vsp), obj_standCrab))
        {
            y += sign(vsp);
        }
    }
    vsp = 0;   
}
if(!floatingAim)
y += vsp;


//WALLJUMPING CHECK

if((place_meeting(x+1,y,obj_platform) &amp;&amp; !place_meeting(x,y+1,obj_platform) &amp;&amp; vsp &gt; 1 &amp;&amp; move == 1 ) || (place_meeting(x-1,y,obj_platform) &amp;&amp; !place_meeting(x,y+1,obj_platform) &amp;&amp; vsp &gt; 1 &amp;&amp; move == -1 &amp;&amp; !damaged))
{
    vsp = 2;
    moveSpeed = walkSpeed;
    wallSliding = true;
    
    if(jetpack == true &amp;&amp; jetfuel &lt; 50)
            jetfuel += 1;
}
else
    wallSliding = false;
    
    
//Jetpacking
if(vsp &gt; 0)
{
    falling = true;
}

if (instance_exists(obj_jetpack))
{
    if(obj_jetpack.equipped == true)
        jetpack = true;
    else jetpack = false;

    if(!key_jumpjet || grounded)
    obj_jetpack.jetting = false;
    
    if (jetpack == true &amp;&amp; jumps == 1 &amp;&amp; key_jumpjet &amp;&amp; falling)
    {

        if(jetfuel &gt; 0)
        {
            if(vsp &gt; -5)
            vsp -= 0.6;
            obj_jetpack.jetting = true;
            jetfuel -= 1;
        }
    }
}
    
//WALL JUMPING 2
if (key_jump &amp;&amp; !fail)
{
    if(wallSliding)
    {
        falling = false;
        vsp = -jumpSpeed;
        jumps = 1;
            
        if (place_meeting(x+1,y,obj_platform))
            {
            wallMomentum = 2;
            wsRight = true;
            wsLeft = false;
            }
        if (place_meeting(x-1,y,obj_platform))
            {
            wallMomentum = 2;
            wsLeft = true;
            wsRight = false;
            }
           //wallSliding = false;
    }
    else if (jetpack == true &amp;&amp; jumps != jumpsMax)
    {
        wallMomentum = 0; 
    }
    else if (jumps &gt; 0)
    {
        if(wallMomentum != 0 &amp;&amp; vsp &gt; 1)
        {
            falling = false;
            vsp = -jumpSpeed + 2;
            wallMomentum = 0;        
            jumps -= 1;
        }
        else if (key_jump &amp;&amp; wallMomentum == 0) 
        {
            falling = false;
            vsp = -jumpSpeed;
            wallMomentum = 0;        
            jumps -= 1;
        }   
        
    }
}

if (wallMomentum &gt; 0)
{   
    
    if(wsLeft)
        gettingAir = 1;
    if(wsRight)
        gettingAir = -1;
        
    move = gettingAir;
    hsp = move * 2;
}


//AIMING

if(key_aimStaff &amp;&amp; grounded &amp;&amp; !wallSliding &amp;&amp; !key_run)
{
    floatingAim = true;
}
else
{
    floatingAim = false;
}

if(floatingAim)
{
    vsp = 0;
    hsp = 0;
}

//Falling off edge
if(y &gt; room_height)
obj_scoreControl.hp = 0;



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do some animation

if(hsp != 0)
image_speed = (moveSpeed / 10)*2
else
image_speed = 0.2;

if(place_meeting(x,y+1,obj_platform) || (place_meeting(x,y+1,obj_movingPlatformH)) || (place_meeting(x,y+1,obj_ice)) || (place_meeting(x,y+1,obj_bolder))|| (place_meeting(x,y+1,obj_standCrab)) )
{
    grounded = true;
}
else 
{
    grounded = false;
}

if(nearWallX == false &amp;&amp; grounded)
{
    if(hsp == 0 &amp;&amp; !floatingAim)
    {
      sprite_index = spr_playerBody;
    }
    else if(key_run)
        {
            if(sprite_index!=spr_playerBodyRun) image_index = 0;
             sprite_index = spr_playerBodyRun;
        }
    else if (hsp != 0 &amp;&amp; !key_run)
    {
        if(sprite_index!=spr_playerBodyMove) image_index = 0;
         sprite_index = spr_playerBodyMove;
    }
}
else if (nearWallX == true &amp;&amp; grounded)
{
    if(key_right == 1 || key_left == -1)
    {    
      if(sprite_index!=spr_playerBodyCollide) image_index = 0;
      sprite_index = spr_playerBodyCollide;
    }
    else
    {
        sprite_index = spr_playerBody;
    }
}

//move

if(move!=0) image_xscale = move;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping Animations

if(!floatingAim)
{
    if(jumps &lt;= 0 &amp;&amp; !grounded)
    {
        if(sprite_index!=spr_playerBodyBall) image_index = 0;
        sprite_index = spr_playerBodyBall;
    }

    if(jumps &gt; 0 &amp;&amp; !grounded &amp;&amp; !fail)
    {
        if(vsp &gt; 0)
        {
        sprite_index = spr_playerBodyFall;
        }
        if(vsp &lt; 0)
        {
        sprite_index = spr_playerBodyJumpUp;
        }
    }
    if(vsp != 0 &amp;&amp; fail)
    {
        sprite_index = spr_playerFail;
    }
    if(grounded &amp;&amp; fail)
    {
    sprite_index = spr_playerFail2;
    move = 0;
    }
}
else
{
    if(sprite_index!=spr_playerStaffHold) image_index = 0;
         sprite_index = spr_playerStaffHold;
}

if(wallSliding)
{
 if(sprite_index!=spr_playerBodyWallSlide) image_index = 0;
        sprite_index = spr_playerBodyWallSlide;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Picking Items up

key_pickup = keyboard_check_pressed(ord("Q")) || (gamepad_button_check_pressed(0,gp_face4));
key_drop = keyboard_check_pressed(ord("E"));

if(instance_exists(obj_jetpack))
{
if(key_pickup)
{
    if (place_meeting(x,y,obj_jetpack))
    {
        obj_jetpack.equipped = true;
    }
}

if(key_drop &amp;&amp; !obj_jetpack.infinite)
{
    if((obj_jetpack.equipped == true &amp;&amp; grounded))
    {
        obj_jetpack.lasting = 0;
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_finish">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(win == 0)
win = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
